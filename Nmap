Nmap
Task 1: Used Orcale Virtual Box to run Kali Linux OS

Task 2: Learned every computer has a max of 65,535 ports. Ports are networking constructs used to direct traffic to the right application on a server.

Task 3: Nmap is a pentesting tool ran from the terminal. Switches, or command arguments tell a program to do different things. For example,
-sS	is the first switch listed in the help menu for a Syn Scan
-sU	for a UDP scan
-O	to detect which Operating System the target it running on
-sV	detects the version of the services running on the target
-v	to increase the verbrosity when you need more information that the default output provided
-vv	verbrosity level two
-oA	Allows toe save nmap results in three major formats
(To reduce network traffic/ detection, should only be ran once)
-oN	save nmap results in “normal” format
-oG	results saved in a “grepable” format
-A	enables “aggressive” mode: 
Activates service detection, 
operating system detection,
 a traceroute and common script scanning
-T5	sets the timing template to Level 5.
There are five levels of timing template offered by Nmap.
Used to increase scan speeds. (Higher speeds are noisier, and can have errors)
-p 80	Tells Nmap to only scan port 80
(Can choose which port to scan –p)
-p 1000-1500	tells namp to scan ports 1000-1500
-p-	tells Nmap to scan All ports
--script		to activate a script from the Nmap scripting library
--script=vuln		activates all scripts in the “vuln” category

Task 4
Port Scanning:

These are the 3 basic scan type, but others do exist.
    TCP Connect Scans -st
    SYN "Half-Open" Scans -sS
    UDP Scans -sU
    
Task 5
       TCP Connection three-way handshake - Tries to connect each 
       specified TCP port to determine if ther service is open by the 
       response it recieves.
       
       Filtered ports - A Firewall is in place. Firewalls are configured
       to drop incoming packets.
       
       Configuring a fire to respond w/ a RST TCP packet:
       IPtables for Linux:
       iptables -I INPUT -p tcp --dport <port> -j REJECT --reject-with tcp-reset

Task 6
      SYN scans are also called: "Half-Open", "Stealth"
      Nmap cannot use SYN scans without sudo permission.
      SYN scans are faster than TCP connect scans.

Task 7
      UDP scans - stateless:
      Doesn't rely on a "handshake". Simply sends packets to target port
      in hope that it will make it.
      Nmap refers to the port being open|filtered if no response, sends twice,
      no response... moves on.
      If sent to Closed UDP port, target responds w/ ICMP ping packet.
      UDP scans are slow compared to TCP scans. Best to scan just top UDP ports:
      Commands:
      --top-ports <number>
      nmap -sU --top-ports 20 <target>
      The Switch for Nmap UDP scan:  -sU
      
Task 8
      Null, FIN, Xmas scans are stealiter than SYN scans
      Null: -sN
      TCP request sent w/ no flag set at all.
      FIN scan: -sF
      Similar to Null, but instead of empty packet.
      The request is sent w/ FIN flag. This is used to close an active connection.
      Nmap will expect a RST if port is closed.
      Xmas scans: -sX
      Send malformed TCP packet, expects a RST response for closed ports.
      Flag that it sets: (PSH, URG, FIN) - wireshark.
      NULL, FIN, & Xmas scans are generally used for Firewall Evasion.
      
Task 9
 ping sweep: -sn
 nmap -sn (ip ranges address) ---ex:
 nmap -sn 192.168.0.0/24
 -sn: tells Nmap to not scan any ports, forcing it to rely on ICMP echo packets
 or ARP requests, if w/ sudo.
 ICMP echo qestions causes nmap to send TCP SYN packet to port 443 of target.
 Also TCP ACK or TCP SYN packet to port 80 of target.

Task 10
Nmap Scripting Engine (NSE):
NSE Scripts are written in the Lua programming language.
Can be used to scan for vulnerabilities, to automating exploits for them.
NSE is particularly useful for reconnaissance w/ an extensive script library.
Task 11
--script=<script-name>		to run a specific script.
Multiple scripts can be run simultaneously by separating them by 				comma.
--script-args			scripts that require arguments
Nmap –script-help <script-name>	Nmap scrips built-in help menus.
Task 12

By Default, Nmap stores its scripts on Linux at:	/usr/share/nmap/scripts

Can use grep command, or ls command
( grep “ftp” /usr/share/nmap/scripts/script.db )
( ls -l /usr/share/nmap/scripts/*ftp* )

*	asterisks on either side of search term is used for categories of scripts.

Task 13
Bypassing Firewalls w/ -Pn 
-Pn
tells Nmap to not bother pinging the host before scanning it, treats the target host as being 	alive, effectively bypassing the ICMP block.
Nmap switches considered useful for Firewall evasion:
-f			fragments packets, makes it less likely the packets will be detected by a firewall 			or IDS.
--mtu <number>	Accepts a maximum transmission unit size, multiples of 8, to use for the packets 			sent
--scan-delay <time>ms
adds delay between packets sent,
Useful in evading any time-based firewall/IDS triggers.
--badsum		generates invalid checksum for packets.
can be used to determine the presence of a firewall/IDS
ICMP			a frequently relied upon protocol that is often blocked. 
Requires the use of the –Pn switch.
--data-length		appends an arbitrary length of random data to end of packets.

Task 14
Scanned Target Machine: Does not respond to ICMP (ping) requests.
Scanned w/ Xmas scan on first 999 ports of target IP – 999 ports open or filtered

Task 15
Conclusion:	Learned using nmap docs is best at a point reference.

